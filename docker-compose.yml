version: '3.8'
services:
  short-url-app:
    container_name: short-url-app
    restart: unless-stopped
    build:
      context: ./short-url-app
      dockerfile: Containerfile
    environment:
        APP_NAME: Meli Short Url
        API_VERSION: 1.0.0
        API_PORT: 8000
        DEBUG_MODE: true
        DATABASE_HOST: meli-postgres
        REDIS_HOST: meli-redis
        REDIS_PASSWORD: meli
        NATS_SERVER: nats://meli-nats:4222
        BASE_URL: https://74bb-200-113-133-203.ngrok-free.app # Only for ngrok
        URL_SIZE: 6
    depends_on:
      - nats
      - redis
      - postgres
    networks: 
      - meli
    ports:
      - "8000:8000"
  short-url-events:
    container_name: short-url-events
    build:
      context: ./short-url-events
      dockerfile: Containerfile
    environment:
        APP_PORT: 8080
        DB_HOST: meli-postgres
        REDIS_HOST: meli-redis
        REDIS_PASSWORD: meli
        REDIS_RETRY_DELAY_MS: 3000
        REDIS_RETRY_ATTEMPS: 20
        NATS_SERVER: nats://nats:4222
        URL_SHORT_URL_APP: http://short-url-app:8000
    depends_on:
      - nats1
      - redis
    networks: 
      - meli
  redis:
    image: redis:7.0.11-alpine
    container_name: meli-redis
    restart: unless-stopped
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    command: redis-server /usr/local/etc/redis/redis.conf --save 20 1 --loglevel warning --requirepass meli
    networks:
      - meli
    volumes:
      - ./service-config/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-data-volumen:/data
  # Postgres Server
  postgres:
    image: postgres:13
    container_name: meli-postgres
    environment:
      POSTGRES_USER: meli
      POSTGRES_PASSWORD: meli
      POSTGRES_DB: meli
    ports:
      - '5432:5432'
    volumes:
      - postgres-data-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "meli", "-d", "meli"]
      interval: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - meli
  # Nats Server
  nats1:
    container_name: meli-nats
    image: nats:latest
    command: "--jetstream --store_dir /data --http_port 8222"
    volumes:
      - nats1-data-volume:/data
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    networks:
      - meli
    healthcheck:
        test: echo $$(wget --server-response http://nats1:8222/varz 2>&1 | grep  '200 OK') | grep '200'  || exit 1
        interval: 20s
        timeout: 5s
        retries: 5
        start_period: 40s
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: edwin@hola.ai
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin-data-volume:/var/lib/pgadmin
    networks:
      - meli
volumes:
  redis-data-volumen:
    driver: local
  postgres-data-volume:
    driver: local
  pgadmin-data-volume:
    driver: local
  nats1-data-volume:
    driver: local
networks:
  meli:
    name: meli